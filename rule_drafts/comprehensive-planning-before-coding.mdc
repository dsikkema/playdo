# MANDATORY Comprehensive Planning Before Coding
**Applies to:** All code files

## ALWAYS Research Before Planning
Before suggesting ANY code changes, you MUST:

1. **Gather complete context** using appropriate tools:
   ```
   - Read relevant files completely
   - List directories to understand project structure
   - Use code search to find related components
   - Examine existing tests thoroughly
   ```

2. **NEVER skip research** even if you think you understand the task

## Create a Detailed Plan of Action
After research, ALWAYS create a comprehensive plan that includes:

1. **External Library/Component Usage**
   - Document the correct API calls and patterns
   - Note common pitfalls and how to avoid them
   - Example:
     ```python
     # CORRECT library usage:
     from sqlalchemy.orm import Session

     def get_user(session: Session, user_id: int):
         return session.query(User).filter(User.id == user_id).first()
     ```

2. **Architectural/Structural Changes**
   - Identify components affected by changes
   - Describe how data will flow through modified architecture
   - Consider impacts on performance, maintainability

3. **Modifications to Existing Components**
   - List all functions/methods requiring changes
   - Describe precise changes needed
   - Identify potential side effects

4. **New Component Additions**
   - Detail responsibilities of new components
   - Describe interfaces with existing code
   - Ensure consistency with project patterns

5. **Test Changes (REQUIRED)**
   - Identify tests needing updates
   - Plan for new tests to cover added functionality
   - Consider edge cases and failure modes

6. **Relationship Between Code and Test Changes**
   - For each code change, identify corresponding test changes
   - Describe how tests will verify correct behavior
   - Plan test-first approach where appropriate

## Example Plan
```
## Comprehensive Plan: Add User Authentication

### Research Completed:
- Examined auth.py, user.py, and related components
- Reviewed 8 existing test files in tests/auth/
- Verified current JWT library usage patterns

### External Libraries:
- Will use PyJWT 2.4.0 with the following pattern:
  ```python
  # Encode with required claims and expiration
  token = jwt.encode({"sub": user_id, "exp": datetime.now() + timedelta(hours=1)},
                    SECRET_KEY, algorithm="HS256")
  ```

### Architectural Changes:
- Adding AuthMiddleware in middleware/auth.py
- Modifying request flow to verify tokens before handlers

### Component Modifications:
- Update user.py: add password hashing and verification
- Modify auth.py: add token generation and validation

### New Components:
- Create middleware/auth.py with JWT verification

### Test Changes:
- Update tests/auth/test_login.py with new token format
- Create tests/middleware/test_auth_middleware.py
- Add test cases for token expiration, invalid tokens

### Test-Code Relationship:
- For user password changes, test both hashing and verification
- For AuthMiddleware, test both valid and invalid token scenarios
- Test integration between middleware and auth handlers
